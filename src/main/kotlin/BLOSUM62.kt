/**
 * Similarity score mtrix BLOSUM62
 *
 * @author Yasuaki Yoshii
 */
class BLOSUM62 {
    private val map = mapOf('A' to 0,
                    'R' to 1,
                    'N' to 2,
                    'D' to 3,
                    'C' to 4,
                    'Q' to 5,
                    'E' to 6,
                    'G' to 7,
                    'H' to 8,
                    'I' to 9,
                    'L' to 10,
                    'K' to 11,
                    'M' to 12,
                    'F' to 13,
                    'P' to 14,
                    'S' to 15,
                    'T' to 16,
                    'W' to 17,
                    'Y' to 18,
                    'V' to 19)
    private val scoreArray =  arrayOf(
        arrayOf( 4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0), // A
        arrayOf(-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3), // R
        arrayOf(-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3), // N
        arrayOf(-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3), // D
        arrayOf( 0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1), // C
        arrayOf(-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2), // Q
        arrayOf(-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2), // E
        arrayOf( 0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3), // G
        arrayOf(-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3), // H
        arrayOf(-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3), // I
        arrayOf(-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1), // L
        arrayOf(-1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2), // K
        arrayOf(-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1), // M
        arrayOf(-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1), // F
        arrayOf(-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2), // P
        arrayOf( 1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2), // S
        arrayOf( 0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0), // T
        arrayOf(-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3), // W
        arrayOf(-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1), // Y
        arrayOf( 0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4)) // V

    fun getScore(a:Int, b:Int): Int {
        require(a in 0..19 && b in 0..19) {"a and b mut be range 0 to 19, was a=$a and b=$b."}
        return scoreArray[a][b]
    }

    fun getScore(a:Char, b:Char): Int {
        val ia = map[a]
        val ib = map[b]
        require(ia != null && ib != null) {"$a or $b is invalid sequence element."}
        return getScore(ia, ib)
    }
}